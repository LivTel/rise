// ReadOutThread.java -*- mode: Fundamental;-*-
// $Header: /space/home/eng/cjm/cvs/rise/ccd/java/ReadOutThread.java,v 1.5 1999-09-17 16:58:20 cjm Exp $
import java.lang.*;
import java.io.*;

import ngat.ccd.*;

/**
 * This class extends thread to support the readout of a CCD camera using the SDSU CCD Controller/libccd/CCDLibrary
 * in a separate thread, so that it may be aborted by the main program whilst it is underway.
 * @author Chris Mottram
 * @version $Revision: 1.5 $
 */
class ReadOutThread extends Thread
{
	/**
	 * Revision Control System id string, showing the version of the Class
	 */
	public final static String RCSID = new String("$Id: ReadOutThread.java,v 1.5 1999-09-17 16:58:20 cjm Exp $");
	/**
	 * CCDLibrary object, the library object used to interface with the SDSU CCD Controller
	 */
	private CCDLibrary libccd = null;
	/**
	 * Private copy of variable to be passed into 
	 * CCDExposureReadOutCCD.
	 */
	private String filename = null;
	/**
	 * Private copy of any exception returned by CCDExposureReadOutCCD. This will be null for successful
	 * completion of the method.
	 */
	private CCDLibraryNativeException readOutException = null;

	/**
	 * Constructor of the thread. Copys all the parameters, ready to pass them into
	 * CCDExposureReadOutCCD when the thread is run.
	 */
	public ReadOutThread(CCDLibrary libccd,String filename)
	{
		this.libccd = libccd;
		if(filename != null)
			this.filename = new String(filename);
		else
			this.filename = null;
	}

	/**
	 * Run method of the thread. Calls
	 * CCDExposureReadOutCCD with the parameters passed into 
	 * the constructor. This causes the CCD to expose. The success or failure of the
	 * operation is stored in <a href="#readOutException">readOutException</a>, which can be reteived using the 
	 * <a href="#getReadOutException">getReadOutException</a> method. Exposure can be aborted using the
	 * <a href="#abort">abort</a> method.
	 * @see #getReadOutException
	 * @see #abort
	 */
	public void run()
	{
		readOutException = null;
		try
		{
			libccd.CCDExposureReadOutCCD(filename);
		}
		catch(CCDLibraryNativeException e)
		{
			readOutException = e;
		}
	}

	/**
	 * This method will terminate a partly completed Read Out. 
	 * CCDExposureAbortReadout is called which stops the CCD.
	 * reading out. 
	 * CCDDSPGetExposureStatus is used to determine
	 * the current state of the exposure.
	 * CCDExposureReadOutCCD to stop what it is doing. 
	 * This causes
	 * the <a href="#run">run</a> method to finish executing, and the 
	 * <a href="#readOutException">readOutException</a>
	 * will be non-null.
	 * @see #getReadOutException
	 * @see #run
	 */
	public void abort()
	{
		int exposureStatus = 0;

		exposureStatus = libccd.CCDDSPGetExposureStatus();
		if(exposureStatus == libccd.CCD_DSP_EXPOSURE_STATUS_READOUT)
			libccd.CCDExposureAbortReadout();
		else
			stop();
	}

	/**
	 * This returns any exception generated by 
	 * CCDExposureReadOutCCD
	 * in the <a href="#run">run</a> method. If the thread hasn't been run yet it returns null. If the exposure 
	 * was successfully completed it returns null, otherwise it returns the exception.
	 * @see #run
	 */
	public CCDLibraryNativeException getReadOutException()
	{
		return readOutException;
	}
}
 
//
// $Log: not supported by cvs2svn $
// Revision 1.4  1999/09/10 15:55:00  cjm
// Changed due to CCDLibrary moving to ngat.ccd. package.
//
// Revision 1.3  1999/09/08 10:52:40  cjm
// Trying to fix file permissions of these files.
//
// Revision 1.2  1999/05/28 09:54:18  dev
// "Name
//
// Revision 1.1  1999/02/23 11:08:00  dev
// Initial revision
//
//
